---
- name: 检查 ETCD 集群健康状况
  shell: "set -o pipefail && {{ bin_dir }}/etcdctl endpoint --cluster status && {{ bin_dir }}/etcdctl endpoint --cluster health  2>&1 | grep -v 'Error: unhealthy cluster' >/dev/null"
  args:
    executable: /bin/bash
  register: etcd_cluster_is_healthy
  failed_when: false
  changed_when: false
  check_mode: no
  run_once: yes
  when: is_etcd_master and etcd_cluster_setup
  tags:
    - facts
  environment:
    ETCDCTL_API: 3
    ETCDCTL_CERT: "{{ etcd_cert_dir }}/admin-{{ inventory_hostname }}.pem"
    ETCDCTL_KEY: "{{ etcd_cert_dir }}/admin-{{ inventory_hostname }}-key.pem"
    ETCDCTL_CACERT: "{{ etcd_cert_dir }}/ca.pem"
    ETCDCTL_ENDPOINTS: "{{ etcd_access_addresses }}"

- fail:
    msg:
      - "请检查 etcd 集群的健康状况" 
      - "{{ bin_dir }}/etcdctl endpoint --cluster status && {{ bin_dir }}/etcdctl endpoint --cluster health"
  when:
    - etcd_cluster_is_healthy.rc != 0

- name: Refresh Time Fact
  setup: filter=ansible_date_time

- name: Set Backup Directory
  set_fact:
    etcd_backup_directory: "{{ ansible_date_time.date }}_{{ ansible_date_time.time | regex_replace(':') }}"

- name: Create Backup Directory
  file:
    path: "{{ etcd_backup_prefix }}/etcd/{{ etcd_backup_directory }}"
    state: directory
    owner: root
    group: root
    mode: 0600

- name: Stat etcd v2 data directory
  stat:
    path: "{{ etcd_data_dir }}/member"
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: etcd_data_dir_member

- name: Backup etcd v2 data
  when: etcd_data_dir_member.stat.exists
  command: >-
    {{ bin_dir }}/etcdctl backup
      --data-dir {{ etcd_data_dir }}
      --backup-dir {{ etcd_backup_prefix }}/etcd/{{ etcd_backup_directory }}
  environment:
    ETCDCTL_API: 2
  retries: 3
  register: backup_v2_command
  until: backup_v2_command.rc == 0
  delay: "{{ retry_stagger | random + 3 }}"

- name: Backup etcd v3 data
  command: >-
    {{ bin_dir }}/etcdctl
      snapshot save {{ etcd_backup_prefix }}/etcd/{{ etcd_backup_directory }}/snapshot.db
  environment:
    ETCDCTL_API: 3
    ETCDCTL_ENDPOINTS: "{{ etcd_access_addresses.split(',') | first }}"
    ETCDCTL_CERT: "{{ etcd_cert_dir }}/admin-{{ inventory_hostname }}.pem"
    ETCDCTL_KEY: "{{ etcd_cert_dir }}/admin-{{ inventory_hostname }}-key.pem"
    ETCDCTL_CACERT: "{{ etcd_cert_dir }}/ca.pem"
  retries: 3
  register: etcd_backup_v3_command
  until: etcd_backup_v3_command.rc == 0
  delay: "{{ retry_stagger | random + 3 }}"

- name: Create Backup Temporary Directory
  file:
    path: "/tmp/etcd-backup/"
    state: directory
    owner: root
    group: root
    mode: 0777

- name: "创建压缩文件 /tmp/{{ etcd_backup_directory }}.tgz"
  community.general.archive:
    path: "{{ etcd_backup_prefix }}/etcd/{{ etcd_backup_directory }}"
    dest: "/tmp/etcd-backup/{{ etcd_backup_directory }}.tgz"

- name: 复制备份数据到本地
  ansible.builtin.fetch:
    src: "/tmp/etcd-backup/{{ etcd_backup_directory }}.tgz"
    dest: "{{ kuboardspray_cluster_dir }}/backup/{{ inventory_hostname }}/{{ etcd_member_name }}/"
    flat: yes

- name: 删除远程临时文件 1
  file:
    path: "{{ etcd_backup_prefix }}/etcd"
    state: absent

- name: 删除远程临时文件 2
  file:
    path: "/tmp/etcd-backup"
    state: absent